#!/usr/bin/env python
'''
Program to read or write Extended Display Identification Data (EDID)
to a digital display.
'''
# (C) Mark Blakeney, markb@berlios.de, April 2012.

import time

EDID_HDR = 20
EDID_LEN = (128, 256)
EDID_ADDR = 0x50

import sys, array, argparse, subprocess
from smbus import SMBus

def getlen(edidhdr):
    'Return the number of bytes expected for this edid hdr'
    if edidhdr[18] <= 0 or edidhdr[18] > len(EDID_LEN):
        sys.stderr.write('ERROR: Unknown EDID version %d\n' % edidhdr[18])
        sys.exit(1)

    return EDID_LEN[edidhdr[18] - 1]

def checksum(edid):
    'Return EDID checksum of the given buffer'
    return (0 - (sum(edid[:-1]) % 256)) % 256

def main():
    'Main code'

    # Process command line options
    opt = argparse.ArgumentParser(description=__doc__.strip() + '''
    Default action is to READ binary EDID data from specified i2c_device and
    write it to standard output. With "-w", will instead read EDID
    binary data from standard input and WRITE it to specified i2c_device.
    Always validates the EDID checksum before allowing a write to device.
    ''')
    opt.add_argument('-w', '--write', action='store_true',
            help='Write EDID to i2c_device from data read from stdin')
    opt.add_argument('-f', '--fix', action='store_true',
            help='Fix last checksum byte automatically when writing the EDID')
    opt.add_argument('-s', '--sleep', default=0, type=float,
            help='Sleep this many seconds between writes')
    opt.add_argument('i2c_device_num', type=int,
            help='i2c device number, e.g. 0 or 1 or 2 ..')
    args = opt.parse_args()

    # Need ic2 device module installed
    if subprocess.call(('modprobe', 'i2c-dev')) != 0:
        sys.stderr.write('ERROR: Can not load i2c-dev. '
                'Must use sudo or be root.\n')
        sys.exit(1)

    # Access i2c device
    smb = SMBus(args.i2c_device_num)

    if args.write:
        # Read EDID from stdin
        edid = array.array('B', sys.stdin.read()).tolist()
        edid_len = getlen(edid)
        if len(edid) != edid_len:
            sys.stderr.write('ERROR: Input must be %d bytes\n' % edid_len)
            sys.exit(1)

        # Check the EDID checksum is valid
        actsum = edid[-1]
        calsum = checksum(edid)
        if actsum != calsum:
            if args.fix:
                edid[-1] = calsum
                sys.stdout.write('Checksum 0x%02x was BAD, rewrote it to '
                        '0x%02x.\n' % (actsum, calsum))
            else:
                sys.stderr.write('ERROR: Checksum 0x%02x is BAD, should be '
                        '0x%02x.\n' % (actsum, calsum))
                sys.exit(1)

        # Write EDID to device
        for i, val in enumerate(edid):
            smb.write_byte_data(EDID_ADDR, i, val)
            time.sleep(args.sleep)
    else:
        # Read EDID from device
        edid = [smb.read_byte_data(EDID_ADDR, i) for i in range(EDID_HDR)]
        edid += [smb.read_byte_data(EDID_ADDR, i) for i in
                range(EDID_HDR, getlen(edid))]

        # Write EDID to stdout
        array.array('B', edid).tofile(sys.stdout)

if __name__ == '__main__':
    main()
